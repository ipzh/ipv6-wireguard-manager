# 容器化部署配置

# Docker Compose 微服务版本
version: '3.8'

services:
  # API网关
  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    ports:
      - "8000:${API_PORT}"
    environment:
      - SERVICE_NAME=api-gateway
      - LOG_LEVEL=info
      - REDIS_URL=redis://redis:${REDIS_PORT}/0
      - CONSUL_URL=http://consul:8500
    depends_on:
      - redis
      - consul
      - auth-service
    networks:
      - ipv6wgm-network
    deploy:
      replicas: 2
      resources:
        limits:
          cpu: 500m
          memory: 512Mi
        requests:
          cpu: 200m
          memory: 256Mi
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${API_PORT}/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 认证服务
  auth-service:
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    environment:
      - SERVICE_NAME=auth-service
      - LOG_LEVEL=info
      - DATABASE_URL=mysql://ipv6wgm:password@mysql:${DB_PORT}/ipv6wgm
      - REDIS_URL=redis://redis:${REDIS_PORT}/1
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      - mysql
      - redis
    networks:
      - ipv6wgm-network
    deploy:
      replicas: 2
      resources:
        limits:
          cpu: 300m
          memory: 384Mi
        requests:
          cpu: 150m
          memory: 192Mi
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 用户服务
  user-service:
    build:
      context: ./services/user-service
      dockerfile: Dockerfile
    ports:
      - "8002:8002"
    environment:
      - SERVICE_NAME=user-service
      - LOG_LEVEL=info
      - DATABASE_URL=mysql://ipv6wgm:password@mysql:${DB_PORT}/ipv6wgm
      - REDIS_URL=redis://redis:${REDIS_PORT}/2
    depends_on:
      - mysql
      - redis
      - auth-service
    networks:
      - ipv6wgm-network
    deploy:
      replicas: 2
      resources:
        limits:
          cpu: 200m
          memory: 256Mi
        requests:
          cpu: 100m
          memory: 128Mi
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # WireGuard服务
  wireguard-service:
    build:
      context: ./services/wireguard-service
      dockerfile: Dockerfile
    ports:
      - "8003:8003"
    environment:
      - SERVICE_NAME=wireguard-service
      - LOG_LEVEL=info
      - DATABASE_URL=mysql://ipv6wgm:password@mysql:${DB_PORT}/ipv6wgm
      - REDIS_URL=redis://redis:${REDIS_PORT}/3
    depends_on:
      - mysql
      - redis
      - config-service
    networks:
      - ipv6wgm-network
    deploy:
      replicas: 3
      resources:
        limits:
          cpu: 400m
          memory: 512Mi
        requests:
          cpu: 200m
          memory: 256Mi
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # BGP服务
  bgp-service:
    build:
      context: ./services/bgp-service
      dockerfile: Dockerfile
    ports:
      - "8004:8004"
    environment:
      - SERVICE_NAME=bgp-service
      - LOG_LEVEL=info
      - DATABASE_URL=mysql://ipv6wgm:password@mysql:${DB_PORT}/ipv6wgm
      - REDIS_URL=redis://redis:${REDIS_PORT}/4
    depends_on:
      - mysql
      - redis
      - network-service
    networks:
      - ipv6wgm-network
    deploy:
      replicas: 2
      resources:
        limits:
          cpu: 300m
          memory: 384Mi
        requests:
          cpu: 150m
          memory: 192Mi
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 网络服务
  network-service:
    build:
      context: ./services/network-service
      dockerfile: Dockerfile
    ports:
      - "8005:8005"
    environment:
      - SERVICE_NAME=network-service
      - LOG_LEVEL=info
      - DATABASE_URL=mysql://ipv6wgm:password@mysql:${DB_PORT}/ipv6wgm
      - REDIS_URL=redis://redis:${REDIS_PORT}/5
    depends_on:
      - mysql
      - redis
      - config-service
    networks:
      - ipv6wgm-network
    deploy:
      replicas: 2
      resources:
        limits:
          cpu: 200m
          memory: 256Mi
        requests:
          cpu: 100m
          memory: 128Mi
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 监控服务
  monitoring-service:
    build:
      context: ./services/monitoring-service
      dockerfile: Dockerfile
    ports:
      - "8006:8006"
    environment:
      - SERVICE_NAME=monitoring-service
      - LOG_LEVEL=info
      - DATABASE_URL=mysql://ipv6wgm:password@mysql:${DB_PORT}/ipv6wgm
      - REDIS_URL=redis://redis:${REDIS_PORT}/6
    depends_on:
      - mysql
      - redis
    networks:
      - ipv6wgm-network
    deploy:
      replicas: 1
      resources:
        limits:
          cpu: 200m
          memory: 256Mi
        requests:
          cpu: 100m
          memory: 128Mi
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8006/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 通知服务
  notification-service:
    build:
      context: ./services/notification-service
      dockerfile: Dockerfile
    ports:
      - "8007:8007"
    environment:
      - SERVICE_NAME=notification-service
      - LOG_LEVEL=info
      - DATABASE_URL=mysql://ipv6wgm:password@mysql:${DB_PORT}/ipv6wgm
      - REDIS_URL=redis://redis:${REDIS_PORT}/7
    depends_on:
      - mysql
      - redis
    networks:
      - ipv6wgm-network
    deploy:
      replicas: 2
      resources:
        limits:
          cpu: 100m
          memory: 128Mi
        requests:
          cpu: 50m
          memory: 64Mi
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8007/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 文件服务
  file-service:
    build:
      context: ./services/file-service
      dockerfile: Dockerfile
    ports:
      - "8008:8008"
    environment:
      - SERVICE_NAME=file-service
      - LOG_LEVEL=info
      - DATABASE_URL=mysql://ipv6wgm:password@mysql:${DB_PORT}/ipv6wgm
      - REDIS_URL=redis://redis:${REDIS_PORT}/8
    depends_on:
      - mysql
      - redis
    networks:
      - ipv6wgm-network
    volumes:
      - file-storage:/app/storage
    deploy:
      replicas: 2
      resources:
        limits:
          cpu: 200m
          memory: 256Mi
        requests:
          cpu: 100m
          memory: 128Mi
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8008/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 配置服务
  config-service:
    build:
      context: ./services/config-service
      dockerfile: Dockerfile
    ports:
      - "8009:8009"
    environment:
      - SERVICE_NAME=config-service
      - LOG_LEVEL=info
      - DATABASE_URL=mysql://ipv6wgm:password@mysql:${DB_PORT}/ipv6wgm
      - REDIS_URL=redis://redis:${REDIS_PORT}/9
    depends_on:
      - mysql
      - redis
    networks:
      - ipv6wgm-network
    deploy:
      replicas: 1
      resources:
        limits:
          cpu: 100m
          memory: 128Mi
        requests:
          cpu: 50m
          memory: 64Mi
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8009/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MySQL数据库
  mysql:
    image: mysql:8.0
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=ipv6wgm
      - MYSQL_USER=ipv6wgm
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    ports:
      - "3306:${DB_PORT}"
    volumes:
      - mysql-data:/var/lib/mysql
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - ipv6wgm-network
    deploy:
      resources:
        limits:
          cpu: 1000m
          memory: 2Gi
        requests:
          cpu: 500m
          memory: 1Gi
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis缓存
  redis:
    image: redis:7-alpine
    ports:
      - "6379:${REDIS_PORT}"
    volumes:
      - redis-data:/data
    networks:
      - ipv6wgm-network
    deploy:
      resources:
        limits:
          cpu: 200m
          memory: 512Mi
        requests:
          cpu: 100m
          memory: 256Mi
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Consul服务发现
  consul:
    image: consul:latest
    ports:
      - "8500:8500"
    environment:
      - CONSUL_BIND_INTERFACE=eth0
    volumes:
      - consul-data:/consul/data
    networks:
      - ipv6wgm-network
    command: >
      consul agent
      -server
      -bootstrap-expect=1
      -ui
      -bind=${SERVER_HOST}
      -client=${SERVER_HOST}
      -retry-join=consul
      -data-dir=/consul/data
    deploy:
      resources:
        limits:
          cpu: 200m
          memory: 256Mi
        requests:
          cpu: 100m
          memory: 128Mi
    healthcheck:
      test: ["CMD", "consul", "members"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx负载均衡器
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - api-gateway
    networks:
      - ipv6wgm-network
    deploy:
      resources:
        limits:
          cpu: 200m
          memory: 256Mi
        requests:
          cpu: 100m
          memory: 128Mi
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus监控
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - ipv6wgm-network
    deploy:
      resources:
        limits:
          cpu: 500m
          memory: 1Gi
        requests:
          cpu: 200m
          memory: 512Mi
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana可视化
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:${FRONTEND_PORT}"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - ipv6wgm-network
    deploy:
      resources:
        limits:
          cpu: 300m
          memory: 512Mi
        requests:
          cpu: 100m
          memory: 256Mi
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${FRONTEND_PORT}/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Jaeger链路追踪
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - ipv6wgm-network
    deploy:
      resources:
        limits:
          cpu: 300m
          memory: 512Mi
        requests:
          cpu: 100m
          memory: 256Mi
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:16686/"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  mysql-data:
  redis-data:
  consul-data:
  prometheus-data:
  grafana-data:
  file-storage:

networks:
  ipv6wgm-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

version: '3.8'

services:
  # 后端API服务
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ipv6-wireguard-backend
    ports:
      - "${API_PORT:-8000}:8000"
    environment:
      # 路径配置
      - INSTALL_DIR=/app
      - CONFIG_DIR=/app/config
      - LOG_DIR=/app/logs
      - DATA_DIR=/app/data
      - BACKUP_DIR=/app/backups
      - CACHE_DIR=/app/cache
      
      # 数据库配置
      - DATABASE_URL=mysql://ipv6wgm:${MYSQL_ROOT_PASSWORD:-password}@mysql:3306/ipv6wgm
      - DATABASE_POOL_SIZE=${DATABASE_POOL_SIZE:-10}
      - DATABASE_MAX_OVERFLOW=${DATABASE_MAX_OVERFLOW:-15}
      
      # API配置
      - API_V1_STR=/api/v1
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES:-11520}
      
      # 服务器配置
      - SERVER_HOST=0.0.0.0
      - SERVER_PORT=8000
      
      # 安全配置
      - FIRST_SUPERUSER=${FIRST_SUPERUSER:-admin}
      - FIRST_SUPERUSER_PASSWORD=${FIRST_SUPERUSER_PASSWORD:-admin123}
      - FIRST_SUPERUSER_EMAIL=${FIRST_SUPERUSER_EMAIL:-admin@example.com}
      
      # WireGuard配置
      - WIREGUARD_PORT=${WIREGUARD_PORT:-51820}
      - WIREGUARD_INTERFACE=${WIREGUARD_INTERFACE:-wg0}
      - WIREGUARD_NETWORK=${WIREGUARD_NETWORK:-10.0.0.0/24}
      - WIREGUARD_IPV6_NETWORK=${WIREGUARD_IPV6_NETWORK:-fd00::/64}
      
      # 日志配置
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - LOG_FORMAT=${LOG_FORMAT:-json}
      
      # 监控配置
      - ENABLE_METRICS=${ENABLE_METRICS:-true}
      - METRICS_PORT=${METRICS_PORT:-9090}
      - ENABLE_HEALTH_CHECK=${ENABLE_HEALTH_CHECK:-true}
      
      # 开发配置
      - DEBUG=${DEBUG:-false}
      - ENVIRONMENT=${ENVIRONMENT:-production}
    depends_on:
      mysql:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - ./config:/app/config
      - ./logs:/app/logs
      - ./data:/app/data
      - ./backups:/app/backups
      - ./cache:/app/cache
      - /etc/wireguard:/etc/wireguard:ro
    networks:
      - wireguard-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # 前端Web服务
  frontend:
    build:
      context: ./php-frontend
      dockerfile: Dockerfile
    container_name: ipv6-wireguard-frontend
    ports:
      - "${WEB_PORT:-80}:80"
      - "${WEB_SSL_PORT:-443}:443"
    environment:
      # 路径配置
      - FRONTEND_DIR=/var/www/html
      - LOG_DIR=/var/log/nginx
      
      # API配置
      - API_BASE_URL=http://backend:8000/api/v1
      - API_VERSION=v1
      - API_TIMEOUT=${API_TIMEOUT:-30}
      
      # 应用配置
      - APP_NAME=${APP_NAME:-IPv6 WireGuard Manager}
      - APP_VERSION=${APP_VERSION:-3.0.0}
      - APP_ENV=${ENVIRONMENT:-production}
      
      # 安全配置
      - SESSION_TIMEOUT=${SESSION_TIMEOUT:-1440}
      - MAX_LOGIN_ATTEMPTS=${MAX_LOGIN_ATTEMPTS:-5}
      - LOCKOUT_DURATION=${LOCKOUT_DURATION:-15}
    depends_on:
      backend:
        condition: service_healthy
    volumes:
      - ./php-frontend:/var/www/html
      - ./logs/nginx:/var/log/nginx
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    networks:
      - wireguard-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MySQL数据库
  mysql:
    image: mysql:${MYSQL_VERSION:-8.0}
    container_name: ipv6-wireguard-mysql
    ports:
      - "${MYSQL_PORT:-3306}:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD:-password}
      - MYSQL_DATABASE=ipv6wgm
      - MYSQL_USER=ipv6wgm
      - MYSQL_PASSWORD=${MYSQL_ROOT_PASSWORD:-password}
      
      # MySQL配置
      - MYSQL_CHARACTER_SET_SERVER=utf8mb4
      - MYSQL_COLLATION_SERVER=utf8mb4_unicode_ci
      - MYSQL_INNODB_BUFFER_POOL_SIZE=${MYSQL_INNODB_BUFFER_POOL_SIZE:-256M}
      - MYSQL_INNODB_LOG_FILE_SIZE=${MYSQL_INNODB_LOG_FILE_SIZE:-64M}
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql/init:/docker-entrypoint-initdb.d
      - ./mysql/my.cnf:/etc/mysql/conf.d/my.cnf
    networks:
      - wireguard-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD:-password}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    command: --default-authentication-plugin=mysql_native_password

  # Redis缓存（可选）
  redis:
    image: redis:7-alpine
    container_name: ipv6-wireguard-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - REDIS_MAXMEMORY=${REDIS_MAXMEMORY:-256mb}
      - REDIS_MAXMEMORY_POLICY=${REDIS_MAXMEMORY_POLICY:-allkeys-lru}
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - wireguard-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    command: redis-server /usr/local/etc/redis/redis.conf

  # Nginx反向代理（可选）
  nginx:
    image: nginx:alpine
    container_name: ipv6-wireguard-nginx
    ports:
      - "${NGINX_PORT:-443}:443"
    environment:
      # 路径配置
      - NGINX_CONFIG_DIR=/etc/nginx
      - NGINX_LOG_DIR=/var/log/nginx
      
      # 应用配置
      - APP_NAME=${APP_NAME:-IPv6 WireGuard Manager}
      - DOMAIN_NAME=${DOMAIN_NAME:-localhost}
      
      # SSL配置
      - SSL_CERT_PATH=${SSL_CERT_PATH:-/etc/nginx/ssl/cert.pem}
      - SSL_KEY_PATH=${SSL_KEY_PATH:-/etc/nginx/ssl/key.pem}
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/sites-available:/etc/nginx/sites-available
      - ./nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - wireguard-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local

networks:
  wireguard-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
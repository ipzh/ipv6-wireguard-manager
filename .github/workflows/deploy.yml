name: Deploy Frontend

on:
  push:
    branches: [ main, develop ]
    paths: [ 'php-frontend/**' ]
  pull_request:
    branches: [ main ]
    paths: [ 'php-frontend/**' ]
  workflow_dispatch:
    inputs:
      environment:
        description: '部署环境'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      skip_tests:
        description: '跳过测试'
        required: false
        default: false
        type: boolean

env:
  PHP_VERSION: '8.1'

jobs:
  test:
    name: 运行测试
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'push'
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ env.PHP_VERSION }}
        extensions: mbstring, xml, ctype, iconv, intl, pdo, pdo_mysql, curl, openssl, json, filter
        coverage: none
        
    - name: 验证PHP语法
      run: |
        find php-frontend -name "*.php" -exec php -l {} \;
        
    - name: 检查配置文件
      run: |
        if [ ! -f "php-frontend/config/config.php" ]; then
          echo "配置文件缺失"
          exit 1
        fi
        if [ ! -f "php-frontend/index.php" ]; then
          echo "主入口文件缺失"
          exit 1
        fi
        
    - name: 检查类文件完整性
      run: |
        required_classes=("ApiClient.php" "Auth.php" "Router.php" "PermissionMiddleware.php")
        for class in "${required_classes[@]}"; do
          if [ ! -f "php-frontend/classes/$class" ]; then
            echo "必需的类文件缺失: $class"
            exit 1
          fi
        done

  deploy-staging:
    name: 部署到测试环境
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置部署密钥
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.STAGING_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -p ${{ secrets.STAGING_SSH_PORT }} ${{ secrets.STAGING_HOST }} >> ~/.ssh/known_hosts
        
    - name: 创建备份
      run: |
        ssh -p ${{ secrets.STAGING_SSH_PORT }} ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }} "
          cd ${{ secrets.STAGING_PATH }} &&
          tar -czf backups/frontend_backup_$(date +%Y%m%d_%H%M%S).tar.gz php-frontend
        "
        
    - name: 同步文件
      run: |
        rsync -avz --delete \
          --exclude='.git' \
          --exclude='node_modules' \
          --exclude='*.log' \
          -e "ssh -p ${{ secrets.STAGING_SSH_PORT }}" \
          php-frontend/ \
          ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }}:${{ secrets.STAGING_PATH }}/php-frontend/
          
    - name: 设置权限
      run: |
        ssh -p ${{ secrets.STAGING_SSH_PORT }} ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }} "
          cd ${{ secrets.STAGING_PATH }}/php-frontend &&
          find . -type d -exec chmod 755 {} \; &&
          find . -type f -exec chmod 644 {} \; &&
          find . -name '*.sh' -exec chmod 755 {} \; &&
          mkdir -p logs cache &&
          chmod 777 logs cache
        "
        
    - name: 清除缓存
      run: |
        ssh -p ${{ secrets.STAGING_SSH_PORT }} ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }} "
          cd ${{ secrets.STAGING_PATH }}/php-frontend &&
          find . -name '*.cache' -delete 2>/dev/null || true &&
          find . -name '*.tmp' -delete 2>/dev/null || true
        "
        
    - name: 重启服务
      run: |
        ssh -p ${{ secrets.STAGING_SSH_PORT }} ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }} "
          systemctl restart ${{ secrets.STAGING_PHP_SERVICE }} &&
          systemctl reload ${{ secrets.STAGING_WEB_SERVER }}
        "
        
    - name: 验证部署
      run: |
        ssh -p ${{ secrets.STAGING_SSH_PORT }} ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }} "
          cd ${{ secrets.STAGING_PATH }}/php-frontend &&
          find . -name '*.php' -exec php -l {} \; | grep -v 'No syntax errors' &&
          systemctl is-active --quiet ${{ secrets.STAGING_PHP_SERVICE }} && echo 'PHP服务运行正常' || echo 'PHP服务异常' &&
          systemctl is-active --quiet ${{ secrets.STAGING_WEB_SERVER }} && echo 'Web服务器运行正常' || echo 'Web服务器异常'
        "

  deploy-production:
    name: 部署到生产环境
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置部署密钥
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.PRODUCTION_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -p ${{ secrets.PRODUCTION_SSH_PORT }} ${{ secrets.PRODUCTION_HOST }} >> ~/.ssh/known_hosts
        
    - name: 创建备份
      run: |
        ssh -p ${{ secrets.PRODUCTION_SSH_PORT }} ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} "
          cd ${{ secrets.PRODUCTION_PATH }} &&
          tar -czf backups/frontend_backup_$(date +%Y%m%d_%H%M%S).tar.gz php-frontend
        "
        
    - name: 同步文件
      run: |
        rsync -avz --delete \
          --exclude='.git' \
          --exclude='node_modules' \
          --exclude='*.log' \
          -e "ssh -p ${{ secrets.PRODUCTION_SSH_PORT }}" \
          php-frontend/ \
          ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }}:${{ secrets.PRODUCTION_PATH }}/php-frontend/
          
    - name: 设置权限
      run: |
        ssh -p ${{ secrets.PRODUCTION_SSH_PORT }} ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} "
          cd ${{ secrets.PRODUCTION_PATH }}/php-frontend &&
          find . -type d -exec chmod 755 {} \; &&
          find . -type f -exec chmod 644 {} \; &&
          find . -name '*.sh' -exec chmod 755 {} \; &&
          mkdir -p logs cache &&
          chmod 777 logs cache
        "
        
    - name: 清除缓存
      run: |
        ssh -p ${{ secrets.PRODUCTION_SSH_PORT }} ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} "
          cd ${{ secrets.PRODUCTION_PATH }}/php-frontend &&
          find . -name '*.cache' -delete 2>/dev/null || true &&
          find . -name '*.tmp' -delete 2>/dev/null || true
        "
        
    - name: 重启服务
      run: |
        ssh -p ${{ secrets.PRODUCTION_SSH_PORT }} ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} "
          systemctl restart ${{ secrets.PRODUCTION_PHP_SERVICE }} &&
          systemctl reload ${{ secrets.PRODUCTION_WEB_SERVER }}
        "
        
    - name: 验证部署
      run: |
        ssh -p ${{ secrets.PRODUCTION_SSH_PORT }} ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} "
          cd ${{ secrets.PRODUCTION_PATH }}/php-frontend &&
          find . -name '*.php' -exec php -l {} \; | grep -v 'No syntax errors' &&
          systemctl is-active --quiet ${{ secrets.PRODUCTION_PHP_SERVICE }} && echo 'PHP服务运行正常' || echo 'PHP服务异常' &&
          systemctl is-active --quiet ${{ secrets.PRODUCTION_WEB_SERVER }} && echo 'Web服务器运行正常' || echo 'Web服务器异常'
        "
        
    - name: 发送部署通知
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ 生产环境部署成功"
        else
          echo "❌ 生产环境部署失败"
        fi

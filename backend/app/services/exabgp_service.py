"""
ExaBGP集成服务：根据数据库中的BGP会话与宣告生成配置并应用
"""
from typing import List
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
import os
import logging

from ..models.bgp import BGPSession as BGPSessionModel, BGPAnnouncement as BGPAnnouncementModel
from ..core.logging import get_logger

logger = get_logger(__name__)


class ExaBGPService:
    def __init__(self, db: AsyncSession, config_path: str = "/etc/exabgp/exabgp.conf"):
        self.db = db
        self.config_path = config_path

    async def generate_config(self) -> str:
        """
        生成ExaBGP配置（完整版本）。
        支持IPv4/IPv6双栈、多会话、路由策略等高级功能。
        """
        result = await self.db.execute(select(BGPSessionModel))
        sessions: List[BGPSessionModel] = result.scalars().all()

        result = await self.db.execute(select(BGPAnnouncementModel))
        announcements: List[BGPAnnouncementModel] = result.scalars().all()

        # 将宣告按会话分组
        grouped: dict[str, List[BGPAnnouncementModel]] = {}
        for ann in announcements:
            key = str(ann.session_id) if ann.session_id else "__global__"
            grouped.setdefault(key, []).append(ann)

        config_lines = []
        
        # 全局配置
        config_lines.append("# Generated by IPv6 WireGuard Manager - Complete BGP Configuration")
        config_lines.append("")
        config_lines.append("# Global Configuration")
        config_lines.append("group exabgp {")
        config_lines.append("    # 基础配置")
        config_lines.append("    router-id 192.168.1.1;")
        config_lines.append("    local-as 65001;")
        config_lines.append("    ")
        config_lines.append("    # 进程管理")
        config_lines.append("    process announce-routes {")
        config_lines.append("        run /usr/bin/python3 /etc/exabgp/announce-routes.py;")
        config_lines.append("        encoder json;")
        config_lines.append("    }")
        config_lines.append("    ")
        config_lines.append("    # 日志配置")
        config_lines.append("    log {")
        config_lines.append("        level INFO;")
        config_lines.append("        destination /var/log/exabgp.log;")
        config_lines.append("    }")
        config_lines.append("}")
        config_lines.append("")

        # BGP会话配置
        config_lines.append("# BGP Sessions")
        for sess in sessions:
            if not sess.enabled:
                continue
                
            config_lines.append(f"neighbor {sess.neighbor} {{")
            config_lines.append(f"    # 会话: {sess.name}")
            config_lines.append(f"    description \"{sess.description or 'WireGuard BGP Session'}\";")
            config_lines.append(f"    router-id 192.168.1.1;")
            config_lines.append(f"    local-address {sess.neighbor.split(':')[0] if ':' in sess.neighbor else sess.neighbor.split()[0]};")
            config_lines.append(f"    local-as {sess.local_as or 65001};")
            config_lines.append(f"    peer-as {sess.remote_as};")
            
            if sess.hold_time:
                config_lines.append(f"    hold-time {sess.hold_time};")
            
            if sess.password:
                config_lines.append(f"    md5 {sess.password};")
            
            config_lines.append("    ")
            config_lines.append("    # 能力协商")
            config_lines.append("    capability {")
            config_lines.append("        graceful-restart 120;")
            config_lines.append("        route-refresh;")
            config_lines.append("        extended-nexthop;")
            config_lines.append("    }")
            config_lines.append("    ")
            config_lines.append("    # 地址族支持")
            config_lines.append("    family {")
            config_lines.append("        ipv4 unicast;")
            config_lines.append("        ipv6 unicast;")
            config_lines.append("    }")
            config_lines.append("    ")
            config_lines.append("    # 路由策略")
            config_lines.append("    api {")
            config_lines.append("        processes [ announce-routes ];")
            config_lines.append("        neighbor-changes;")
            config_lines.append("    }")
            config_lines.append("}")
            config_lines.append("")

        # 路由宣告配置
        config_lines.append("# Route Announcements")
        for sess in sessions:
            if not sess.enabled:
                continue
                
            key = str(sess.id)
            session_announcements = grouped.get(key, [])
            
            if session_announcements:
                config_lines.append(f"# Session: {sess.name}")
                for ann in session_announcements:
                    if not ann.enabled:
                        continue
                        
                    # 判断是IPv4还是IPv6前缀
                    if ':' in ann.prefix:
                        # IPv6前缀
                        config_lines.append(f"announce route {ann.prefix} next-hop {ann.next_hop or 'self'} community [65001:100] large-community [65001:100:1];")
                    else:
                        # IPv4前缀
                        config_lines.append(f"announce route {ann.prefix} next-hop {ann.next_hop or 'self'} community [65001:100] large-community [65001:100:1];")
                config_lines.append("")

        # 全局宣告
        global_announcements = grouped.get("__global__", [])
        if global_announcements:
            config_lines.append("# Global Announcements")
            for ann in global_announcements:
                if not ann.enabled:
                    continue
                    
                if ':' in ann.prefix:
                    config_lines.append(f"announce route {ann.prefix} next-hop {ann.next_hop or 'self'} community [65001:200] large-community [65001:200:1];")
                else:
                    config_lines.append(f"announce route {ann.prefix} next-hop {ann.next_hop or 'self'} community [65001:200] large-community [65001:200:1];")
            config_lines.append("")

        # 路由映射和策略
        config_lines.append("# Route Policies")
        config_lines.append("route-map inbound-policy {")
        config_lines.append("    # 入站路由过滤")
        config_lines.append("    deny ${SERVER_HOST}/0 exact-match;")
        config_lines.append("    deny ::/0 exact-match;")
        config_lines.append("    permit any;")
        config_lines.append("}")
        config_lines.append("")

        config_lines.append("route-map outbound-policy {")
        config_lines.append("    # 出站路由过滤")
        config_lines.append("    set community 65001:300;")
        config_lines.append("    set large-community 65001:300:1;")
        config_lines.append("    permit any;")
        config_lines.append("}")

        return '\n'.join(config_lines)

    async def apply_config(self) -> bool:
        """写入配置文件，留待运维层面触发重载（或后续增加重载操作）"""
        try:
            config = await self.generate_config()
            os.makedirs(os.path.dirname(self.config_path), exist_ok=True)
            with open(self.config_path, "w", encoding="utf-8") as f:
                f.write(config)
            logger.info(f"ExaBGP配置已写入: {self.config_path}")
            return True
        except Exception as e:
            logger.error(f"写入ExaBGP配置失败: {e}")
            return False

    async def get_status(self) -> dict:
        """
        返回简化状态；后续可接入真实exabgp运行状态（例如通过进程/套接字查询）。
        """
        try:
            exists = os.path.exists(self.config_path)
            return {"exabgp": "configured" if exists else "not_configured", "config_path": self.config_path}
        except Exception:
            return {"exabgp": "unknown", "config_path": self.config_path}
#!/usr/bin/env python3
"""
IPv6 WireGuard Manager - CLI管理工具
提供命令行界面来管理IPv6 WireGuard Manager服务
"""

import sys
import os
import subprocess
import json
import time
import argparse
from pathlib import Path
from typing import Dict, List, Optional

# 添加项目根目录到Python路径
PROJECT_ROOT = Path(__file__).parent.absolute()
sys.path.insert(0, str(PROJECT_ROOT))

# 配置
SERVICE_NAME = "ipv6-wireguard-manager"
INSTALL_DIR = "/opt/ipv6-wireguard-manager"
API_PORT = 8000
WEB_PORT = 80

class Colors:
    """终端颜色定义"""
    RED = '\033[0;31m'
    GREEN = '\033[0;32m'
    YELLOW = '\033[1;33m'
    BLUE = '\033[0;34m'
    PURPLE = '\033[0;35m'
    CYAN = '\033[0;36m'
    WHITE = '\033[1;37m'
    NC = '\033[0m'  # No Color

class IPv6WireGuardManagerCLI:
    """IPv6 WireGuard Manager CLI工具"""
    
    def __init__(self):
        self.service_name = SERVICE_NAME
        self.install_dir = INSTALL_DIR
        self.api_port = API_PORT
        self.web_port = WEB_PORT
    
    def log_info(self, message: str):
        """信息日志"""
        print(f"{Colors.BLUE}[INFO]{Colors.NC} {message}")
    
    def log_success(self, message: str):
        """成功日志"""
        print(f"{Colors.GREEN}[SUCCESS]{Colors.NC} {message}")
    
    def log_warning(self, message: str):
        """警告日志"""
        print(f"{Colors.YELLOW}[WARNING]{Colors.NC} {message}")
    
    def log_error(self, message: str):
        """错误日志"""
        print(f"{Colors.RED}[ERROR]{Colors.NC} {message}")
    
    def get_database_config(self) -> Dict[str, str]:
        """获取数据库配置"""
        try:
            # 尝试从环境变量获取数据库配置
            db_url = os.getenv('DATABASE_URL')
            if db_url:
                # 解析DATABASE_URL: mysql://user:password@host:port/database
                import re
                match = re.match(r'mysql://([^:]+):([^@]+)@([^:]+):(\d+)/(.+)', db_url)
                if match:
                    return {
                        'user': match.group(1),
                        'password': match.group(2),
                        'host': match.group(3),
                        'port': match.group(4),
                        'database': match.group(5)
                    }
            
            # 尝试从配置文件读取
            env_file = f"{self.install_dir}/.env"
            if os.path.exists(env_file):
                with open(env_file, 'r') as f:
                    for line in f:
                        if line.startswith('DATABASE_URL='):
                            db_url = line.split('=', 1)[1].strip()
                            match = re.match(r'mysql://([^:]+):([^@]+)@([^:]+):(\d+)/(.+)', db_url)
                            if match:
                                return {
                                    'user': match.group(1),
                                    'password': match.group(2),
                                    'host': match.group(3),
                                    'port': match.group(4),
                                    'database': match.group(5)
                                }
            
            # 默认配置
            return {
                'user': 'ipv6wgm',
                'password': 'password',
                'host': 'localhost',
                'port': '3306',
                'database': 'ipv6wgm'
            }
        except Exception as e:
            self.log_error(f"获取数据库配置失败: {e}")
            return {
                'user': 'ipv6wgm',
                'password': 'password',
                'host': 'localhost',
                'port': '3306',
                'database': 'ipv6wgm'
            }
    
    def run_command(self, command: str, capture_output: bool = True) -> subprocess.CompletedProcess:
        """运行系统命令"""
        try:
            # 将命令字符串转换为参数列表
            import shlex
            cmd_args = shlex.split(command)
            
            if capture_output:
                result = subprocess.run(
                    cmd_args, 
                    shell=False, 
                    capture_output=True, 
                    text=True, 
                    check=False
                )
            else:
                result = subprocess.run(cmd_args, shell=False, check=False)
            return result
        except Exception as e:
            self.log_error(f"命令执行失败: {e}")
            return subprocess.CompletedProcess(command, 1, "", str(e))
    
    def check_service_status(self) -> bool:
        """检查服务状态"""
        result = self.run_command(f"systemctl is-active {self.service_name}")
        return result.returncode == 0
    
    def start_service(self):
        """启动服务"""
        self.log_info("启动IPv6 WireGuard Manager服务...")
        
        if self.check_service_status():
            self.log_warning("服务已经在运行")
            return True
        
        result = self.run_command(f"sudo systemctl start {self.service_name}")
        if result.returncode == 0:
            self.log_success("服务启动成功")
            # 等待服务完全启动
            time.sleep(3)
            if self.check_service_status():
                self.log_success("服务运行正常")
                return True
            else:
                self.log_error("服务启动后未正常运行")
                return False
        else:
            self.log_error(f"服务启动失败: {result.stderr}")
            return False
    
    def stop_service(self):
        """停止服务"""
        self.log_info("停止IPv6 WireGuard Manager服务...")
        
        if not self.check_service_status():
            self.log_warning("服务未运行")
            return True
        
        result = self.run_command(f"sudo systemctl stop {self.service_name}")
        if result.returncode == 0:
            self.log_success("服务停止成功")
            return True
        else:
            self.log_error(f"服务停止失败: {result.stderr}")
            return False
    
    def restart_service(self):
        """重启服务"""
        self.log_info("重启IPv6 WireGuard Manager服务...")
        
        result = self.run_command(f"sudo systemctl restart {self.service_name}")
        if result.returncode == 0:
            self.log_success("服务重启成功")
            # 等待服务完全启动
            time.sleep(5)
            if self.check_service_status():
                self.log_success("服务运行正常")
                return True
            else:
                self.log_error("服务重启后未正常运行")
                return False
        else:
            self.log_error(f"服务重启失败: {result.stderr}")
            return False
    
    def show_status(self):
        """显示服务状态"""
        self.log_info("IPv6 WireGuard Manager 服务状态")
        print("=" * 50)
        
        # 检查服务状态
        if self.check_service_status():
            self.log_success("✓ 服务正在运行")
        else:
            self.log_error("✗ 服务未运行")
        
        # 显示详细状态
        result = self.run_command(f"systemctl status {self.service_name}")
        if result.returncode == 0:
            print("\n详细状态:")
            print(result.stdout)
        
        # 检查端口监听
        print("\n端口监听状态:")
        result = self.run_command(f"netstat -tlnp | grep -E ':(80|8000) '")
        if result.stdout:
            print(result.stdout)
        else:
            self.log_warning("未检测到端口监听")
        
        # 检查API连接
        print("\nAPI连接测试:")
        try:
            import requests
            response = requests.get(f"http://localhost:{self.api_port}/api/v1/health", timeout=5)
            if response.status_code == 200:
                self.log_success("✓ API连接正常")
            else:
                self.log_warning(f"⚠ API响应异常: {response.status_code}")
        except Exception as e:
            self.log_error(f"✗ API连接失败: {e}")
    
    def show_logs(self, lines: int = 50, follow: bool = False):
        """显示服务日志"""
        if follow:
            self.log_info(f"实时显示服务日志 (按Ctrl+C退出)...")
            self.run_command(f"sudo journalctl -u {self.service_name} -f", capture_output=False)
        else:
            self.log_info(f"显示最近 {lines} 行服务日志:")
            result = self.run_command(f"sudo journalctl -u {self.service_name} --no-pager -n {lines}")
            if result.stdout:
                print(result.stdout)
            else:
                self.log_error("无法获取日志")
    
    def update_system(self):
        """更新系统"""
        self.log_info("更新IPv6 WireGuard Manager系统...")
        
        # 停止服务
        if self.check_service_status():
            self.log_info("停止服务...")
            self.stop_service()
        
        # 备份当前配置
        self.log_info("备份当前配置...")
        backup_dir = f"{self.install_dir}/backup_{int(time.time())}"
        self.run_command(f"mkdir -p {backup_dir}")
        self.run_command(f"cp -r {self.install_dir}/.env {backup_dir}/")
        self.run_command(f"cp -r {self.install_dir}/backend {backup_dir}/")
        
        # 拉取最新代码
        self.log_info("拉取最新代码...")
        os.chdir(self.install_dir)
        result = self.run_command("git pull origin main")
        if result.returncode != 0:
            self.log_error("代码更新失败")
            return False
        
        # 更新依赖
        self.log_info("更新Python依赖...")
        result = self.run_command(f"cd {self.install_dir} && source venv/bin/activate && pip install -r backend/requirements.txt")
        if result.returncode != 0:
            self.log_error("依赖更新失败")
            return False
        
        # 重启服务
        self.log_info("重启服务...")
        if self.start_service():
            self.log_success("系统更新完成")
            return True
        else:
            self.log_error("系统更新失败")
            return False
    
    def create_backup(self, backup_name: Optional[str] = None):
        """创建备份"""
        if not backup_name:
            backup_name = f"backup_{int(time.time())}"
        
        self.log_info(f"创建备份: {backup_name}")
        
        backup_dir = f"{self.install_dir}/backups/{backup_name}"
        self.run_command(f"mkdir -p {backup_dir}")
        
        # 备份配置文件
        self.run_command(f"cp -r {self.install_dir}/.env {backup_dir}/")
        self.run_command(f"cp -r {self.install_dir}/backend {backup_dir}/")
        self.run_command(f"cp -r {self.install_dir}/php-frontend {backup_dir}/")
        
        # 备份数据库
        self.log_info("备份数据库...")
        db_config = self.get_database_config()
        
        # 使用环境变量避免明文密码
        env = os.environ.copy()
        env['MYSQL_PWD'] = db_config['password']
        
        result = subprocess.run([
            'mysqldump',
            '-h', db_config['host'],
            '-P', db_config['port'],
            '-u', db_config['user'],
            db_config['database']
        ], env=env, capture_output=True, text=True)
        
        if result.returncode == 0:
            with open(f"{backup_dir}/database.sql", "w") as f:
                f.write(result.stdout)
            self.log_success("数据库备份完成")
        else:
            self.log_warning(f"数据库备份失败: {result.stderr}")
        
        # 创建备份信息文件
        backup_info = {
            "name": backup_name,
            "timestamp": int(time.time()),
            "version": "3.1.0",
            "description": "自动备份"
        }
        
        with open(f"{backup_dir}/backup_info.json", "w") as f:
            json.dump(backup_info, f, indent=2)
        
        self.log_success(f"备份创建完成: {backup_dir}")
    
    def show_monitor(self):
        """显示系统监控信息"""
        self.log_info("IPv6 WireGuard Manager 系统监控")
        print("=" * 50)
        
        # 系统资源
        print("\n系统资源:")
        result = self.run_command("free -h")
        if result.stdout:
            print(result.stdout)
        
        result = self.run_command("df -h")
        if result.stdout:
            print(result.stdout)
        
        # 服务状态
        print("\n服务状态:")
        if self.check_service_status():
            self.log_success("✓ IPv6 WireGuard Manager 运行中")
        else:
            self.log_error("✗ IPv6 WireGuard Manager 未运行")
        
        # 端口状态
        print("\n端口状态:")
        result = self.run_command(f"netstat -tlnp | grep -E ':(80|8000) '")
        if result.stdout:
            print(result.stdout)
        
        # API状态
        print("\nAPI状态:")
        try:
            import requests
            response = requests.get(f"http://localhost:{self.api_port}/api/v1/health", timeout=5)
            if response.status_code == 200:
                self.log_success("✓ API服务正常")
                data = response.json()
                print(f"  版本: {data.get('version', 'N/A')}")
                print(f"  状态: {data.get('status', 'N/A')}")
            else:
                self.log_warning(f"⚠ API服务异常: {response.status_code}")
        except Exception as e:
            self.log_error(f"✗ API服务不可用: {e}")
        
        # 数据库状态
        print("\n数据库状态:")
        db_config = self.get_database_config()
        
        # 使用环境变量避免明文密码
        env = os.environ.copy()
        env['MYSQL_PWD'] = db_config['password']
        
        result = subprocess.run([
            'mysql',
            '-h', db_config['host'],
            '-P', db_config['port'],
            '-u', db_config['user'],
            '-e', 'SELECT 1;'
        ], env=env, capture_output=True, text=True)
        
        if result.returncode == 0:
            self.log_success("✓ 数据库连接正常")
        else:
            self.log_error(f"✗ 数据库连接失败: {result.stderr}")
    
    def show_help(self):
        """显示帮助信息"""
        help_text = f"""
{Colors.CYAN}IPv6 WireGuard Manager CLI 管理工具{Colors.NC}

{Colors.WHITE}用法:{Colors.NC}
    ipv6-wireguard-manager <命令> [选项]

{Colors.WHITE}服务管理命令:{Colors.NC}
    start                   启动服务
    stop                    停止服务
    restart                 重启服务
    status                  查看服务状态

{Colors.WHITE}系统管理命令:{Colors.NC}
    logs [选项]             查看服务日志
        -f, --follow        实时跟踪日志
        -n, --lines N       显示最近N行日志 (默认50)
    
    update                  更新系统到最新版本
    
    backup [名称]           创建系统备份
        --name NAME         指定备份名称
    
    monitor                 显示系统监控信息

{Colors.WHITE}其他命令:{Colors.NC}
    help                    显示此帮助信息
    version                 显示版本信息

{Colors.WHITE}示例:{Colors.NC}
    ipv6-wireguard-manager start
    ipv6-wireguard-manager logs -f
    ipv6-wireguard-manager backup my-backup
    ipv6-wireguard-manager monitor

{Colors.WHITE}更多信息:{Colors.NC}
    项目主页: https://github.com/ipzh/ipv6-wireguard-manager
    文档: https://github.com/ipzh/ipv6-wireguard-manager/tree/main/docs
"""
        print(help_text)
    
    def show_version(self):
        """显示版本信息"""
        version_info = f"""
{Colors.CYAN}IPv6 WireGuard Manager{Colors.NC}
版本: 3.1.0
安装目录: {self.install_dir}
服务名称: {self.service_name}
API端口: {self.api_port}
Web端口: {self.web_port}
"""
        print(version_info)

def main():
    """主函数"""
    parser = argparse.ArgumentParser(
        description="IPv6 WireGuard Manager CLI管理工具",
        add_help=False
    )
    
    parser.add_argument("command", nargs="?", help="要执行的命令")
    parser.add_argument("-f", "--follow", action="store_true", help="实时跟踪日志")
    parser.add_argument("-n", "--lines", type=int, default=50, help="显示日志行数")
    parser.add_argument("--name", help="备份名称")
    parser.add_argument("--version", action="store_true", help="显示版本信息")
    parser.add_argument("--help", action="store_true", help="显示帮助信息")
    
    args = parser.parse_args()
    
    cli = IPv6WireGuardManagerCLI()
    
    # 处理特殊参数
    if args.version:
        cli.show_version()
        return
    
    if args.help or not args.command:
        cli.show_help()
        return
    
    # 执行命令
    command = args.command.lower()
    
    try:
        if command == "start":
            cli.start_service()
        elif command == "stop":
            cli.stop_service()
        elif command == "restart":
            cli.restart_service()
        elif command == "status":
            cli.show_status()
        elif command == "logs":
            cli.show_logs(lines=args.lines, follow=args.follow)
        elif command == "update":
            cli.update_system()
        elif command == "backup":
            cli.create_backup(backup_name=args.name)
        elif command == "monitor":
            cli.show_monitor()
        elif command == "help":
            cli.show_help()
        elif command == "version":
            cli.show_version()
        else:
            cli.log_error(f"未知命令: {command}")
            cli.log_info("使用 'ipv6-wireguard-manager help' 查看可用命令")
            sys.exit(1)
    
    except KeyboardInterrupt:
        cli.log_info("\n操作已取消")
        sys.exit(0)
    except Exception as e:
        cli.log_error(f"执行命令时发生错误: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()

# HAProxy 负载均衡配置
# 支持高可用、负载均衡、健康检查

global
    daemon
    maxconn 4096
    log stdout local0
    chroot /var/lib/haproxy
    stats socket /run/haproxy/admin.sock mode 660 level admin
    stats timeout 30s
    user haproxy
    group haproxy

defaults
    mode http
    timeout connect 5000ms
    timeout client 50000ms
    timeout server 50000ms
    option httplog
    option dontlognull
    option redispatch
    retries 3
    maxconn 2000

# 统计页面
listen stats
    bind *:8404
    stats enable
    stats uri /stats
    stats refresh 5s
    stats admin if TRUE

# 后端API负载均衡
backend backend_servers
    balance roundrobin
    option httpchk GET /health
    http-check expect status 200
    
    server backend1 backend-1:8000 check inter 5s rise 2 fall 3
    server backend2 backend-2:8000 check inter 5s rise 2 fall 3

# 前端负载均衡
backend frontend_servers
    balance roundrobin
    option httpchk GET /health.php
    http-check expect status 200
    
    server frontend1 frontend:80 check inter 5s rise 2 fall 3

# 数据库负载均衡（读操作）
backend mysql_read_servers
    mode tcp
    balance roundrobin
    option mysql-check user haproxy
    
    server mysql-master mysql-master:3306 check inter 5s rise 2 fall 3
    server mysql-slave mysql-slave:3306 check inter 5s rise 2 fall 3 backup

# 数据库写操作（只写主库）
backend mysql_write_servers
    mode tcp
    balance roundrobin
    option mysql-check user haproxy
    
    server mysql-master mysql-master:3306 check inter 5s rise 2 fall 3

# Redis负载均衡
backend redis_servers
    mode tcp
    balance roundrobin
    option tcp-check
    
    server redis-master redis-master:6379 check inter 5s rise 2 fall 3
    server redis-slave redis-slave:6379 check inter 5s rise 2 fall 3 backup

# 前端访问
frontend frontend_http
    bind *:80
    redirect scheme https code 301 if !{ ssl_fc }
    
    # 静态文件直接转发到前端
    acl is_static path_beg /assets/
    use_backend frontend_servers if is_static
    
    # API请求转发到后端
    acl is_api path_beg /api/
    use_backend backend_servers if is_api
    
    # 健康检查
    acl is_health path /health
    use_backend backend_servers if is_health
    
    # 指标端点
    acl is_metrics path /metrics
    use_backend backend_servers if is_metrics
    
    # 默认转发到前端
    default_backend frontend_servers

# HTTPS前端
frontend frontend_https
    bind *:443 ssl crt /etc/ssl/certs/haproxy.pem
    redirect scheme https code 301 if !{ ssl_fc }
    
    # 静态文件直接转发到前端
    acl is_static path_beg /assets/
    use_backend frontend_servers if is_static
    
    # API请求转发到后端
    acl is_api path_beg /api/
    use_backend backend_servers if is_api
    
    # 健康检查
    acl is_health path /health
    use_backend backend_servers if is_health
    
    # 指标端点
    acl is_metrics path /metrics
    use_backend backend_servers if is_metrics
    
    # 默认转发到前端
    default_backend frontend_servers

# 后端API访问
frontend backend_http
    bind *:8080
    
    # 所有请求转发到后端
    default_backend backend_servers

# 数据库访问
frontend mysql_frontend
    bind *:3306
    mode tcp
    default_backend mysql_write_servers

# Redis访问
frontend redis_frontend
    bind *:6379
    mode tcp
    default_backend redis_servers
